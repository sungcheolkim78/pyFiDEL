{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyFiDEL (Fermi-Dirac Ensemble Learner)","text":"<p>This is the official repo for our paper \"Learning from Fermions: the Fermi-Dirac Distribution Provides a Calibrated Probabilitic Output for Binary Classifiers\" published in PNAS 2021. Here, the python implementation of the Fermi-Dirac ensemble learning (FiDEL) method is included.</p> <p>Contact: sungcheol.kim78[at]gmail[dot]com</p>"},{"location":"#installation","title":"Installation","text":"<p>with <code>Poetry</code>, </p> <pre><code>git clone https://github.com/sungcheolkim78/pyFiDEL.git\n\npip3 install poetry\npoetry install\npip3 install -e .\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<ul> <li>Usage for ensemble method (FiDEL)</li> <li>Usage for optimal threshold</li> <li>Usage for confidence interval </li> </ul>"},{"location":"concept/","title":"What is Fermi-Dirac (FD) distribution?","text":""},{"location":"concept/#how-can-we-connect-binary-classifier-to-fd-distribution","title":"How can we connect binary classifier to FD distribution?","text":""},{"location":"concept/#what-are-the-main-benefits-of-fd-distribution","title":"What are the main benefits of FD distribution?","text":""},{"location":"cookbook/","title":"How to generate figures in PNAS paper?","text":""},{"location":"cookbook/#figure-1-in-pnas","title":"Figure 1 in PNAS","text":"<pre><code>import matplotlib.pyplot as plt\n\nfrom pyFiDEL import SimClassifier, PCR\n\n# create simulator\nc = SimClassifier(N=10000, rho=.5)\n\n# generate Gaussian score with target AUC\nscore = c.create_gaussian_scores(auc0=.9)\n\n# create pcr data\np = PCR(c.score, c.y, sample_size=100, sample_n=1000)\n\n# plot PCR distribution\nplt.plot(p.pcr, '.')\n</code></pre>"},{"location":"cookbook/#figure-2-in-pnas","title":"Figure 2 in PNAS","text":"<pre><code>import numpy as np\nfrom pyFiDEL.ranks import build_correpond_table\n\nauclist = np.linspace(0.52, 0.98, num=47)\nrholist = np.linspace(.1, .9, num=17)\n\n# calculate beta, mu from auc, rho\ndf = build_correpond_table(auclist, rholist, resol=.00001, method='root')\n\n# plot in 3D space\n</code></pre>"},{"location":"cookbook/#figure-3-in-pnas","title":"Figure 3 in PNAS","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>ci</li> <li>ensemble</li> <li>pcr</li> <li>ranks</li> <li>simulator</li> <li>utils</li> </ul>"},{"location":"reference/ci/","title":"ci","text":"<p>ci.py - confidence interval calculation</p> <p>Soli Deo Gloria</p>"},{"location":"reference/ci/#pyFiDEL.ci.Pxxy_int","title":"<code>Pxxy_int(beta, mu, rho, resol=1e-06)</code>","text":"<p>calculate Pxxy iwth integral formula</p>"},{"location":"reference/ci/#pyFiDEL.ci.Pxy_int","title":"<code>Pxy_int(beta, mu, rho, resol=1e-06)</code>","text":"<p>calculate Pxy with integral formula</p>"},{"location":"reference/ci/#pyFiDEL.ci.Pxyy_int","title":"<code>Pxyy_int(beta, mu, rho, resol=1e-06)</code>","text":"<p>calculate Pxyy iwth integral formula</p>"},{"location":"reference/ci/#pyFiDEL.ci.var_auc_fermi","title":"<code>var_auc_fermi(auc, rho, N, resol=1e-06)</code>","text":"<p>calculate variance of AUC from Fermi-Dirac distribution</p>"},{"location":"reference/ensemble/","title":"ensemble","text":"<p>ensemble.py - ensemble method with FiDEL</p> <p>Soli Deo Gloria</p>"},{"location":"reference/ensemble/#pyFiDEL.ensemble.FiDEL","title":"<code>FiDEL(predictions, method_names=None)</code>","text":"<p>         Bases: <code>object</code></p>"},{"location":"reference/ensemble/#pyFiDEL.ensemble.FiDEL.calculate_performance","title":"<code>calculate_performance(y, method='FiDEL', alpha=1)</code>","text":"<p>calculate ensemble performance</p>"},{"location":"reference/pcr/","title":"pcr","text":"<p>pcr.py - Probability of Class y at given Rank r (PCR)</p> <p>Soli Deo Gloria</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR","title":"<code>PCR(scores, y, sample_size=100, sample_n=300, method='bootstrap')</code>","text":"<p>         Bases: <code>object</code></p> <p>probability of class at given rank</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.auc","title":"<code>auc()</code>","text":"<p>calculate AUC from pcr</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.auprc","title":"<code>auprc()</code>","text":"<p>calculate area under precision recall curve</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.build_metric","title":"<code>build_metric()</code>","text":"<p>calculate metric and parameters from pcr</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.check_fermi","title":"<code>check_fermi()</code>","text":"<p>check matching between fermi-dirac distribution and pcr</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.pcr_sample","title":"<code>pcr_sample()</code>","text":"<p>calculate pcr using bootstrap method</p>"},{"location":"reference/ranks/","title":"ranks","text":"<p>ranks.py - rank based metric calculation for structured learning</p> <p>Soli Deo Gloria</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.auc_rank","title":"<code>auc_rank(scores, y)</code>","text":"<p>calculate AUC using rank formula</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.build_correspond_table","title":"<code>build_correspond_table(auclist, rholist, resol=0.001, method='root')</code>","text":"<p>calculate correspondence table between (auc, rho) and (beta, mu)</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.build_metric","title":"<code>build_metric(scores, y, method='root')</code>","text":"<p>calculate all metrics using rank formula</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.get_fermi_min","title":"<code>get_fermi_min(auc, rho, N=1, resol=0.0001, method='beta')</code>","text":"<p>calculate beta and mu (or l1 and l2) from AUC and rho</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.get_fermi_root","title":"<code>get_fermi_root(auc, rho, N=1)</code>","text":"<p>calculate beta and mu from AUC and rho</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.get_lambda","title":"<code>get_lambda(auc, rho, N=1000)</code>","text":"<p>calculate lambda1, lambda2 from auc, rho</p>"},{"location":"reference/simulator/","title":"simulator","text":"<p>simulator.py - create gaussian score distribution to mimic binary classifier</p> <p>Soli Deo Gloria</p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier","title":"<code>SimClassifier(N=1000, rho=0.5, y=None)</code>","text":"<p>         Bases: <code>object</code></p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier.create_gaussian_scores","title":"<code>create_gaussian_scores(auc0=0.9, tol=0.0001, max_iter=2000)</code>","text":"<p>create gaussian scores to match AUC</p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier.create_predictions","title":"<code>create_predictions(n_methods=20, auc_list=None)</code>","text":"<p>create n_methods gaussian score sets</p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier.plot_o","title":"<code>plot_o()</code>","text":"<p>build data for</p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier.plot_score","title":"<code>plot_score()</code>","text":"<p>plot histogram of scores</p>"},{"location":"reference/utils/","title":"utils","text":"<p>utils.py - utility functions</p> <p>Soli Deo Gloria</p>"},{"location":"reference/utils/#pyFiDEL.utils.fermi_b","title":"<code>fermi_b(x, b, m, normalized=False)</code>","text":"<p>calculate fermi-dirac distribution with np.array x with beta and mu</p>"},{"location":"reference/utils/#pyFiDEL.utils.fermi_l","title":"<code>fermi_l(x, l1, l2)</code>","text":"<p>calculate fermi-dirac distribution with np.array x with l1 and l2</p>"}]}