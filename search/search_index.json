{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyFiDEL (Fermi-Dirac Ensemble Learner)","text":"<p>This is the official repo for our paper \"Learning from Fermions: the Fermi-Dirac Distribution Provides a Calibrated Probabilitic Output for Binary Classifiers\" published in PNAS 2021. Here, the python implementation of the Fermi-Dirac ensemble learning (FiDEL) method is included.</p> <p>Contact: sungcheol.kim78[at]gmail[dot]com</p>"},{"location":"#installation","title":"Installation","text":"<p>with <code>Poetry</code>, </p> <pre><code>git clone https://github.com/sungcheolkim78/pyFiDEL.git\n\npip3 install poetry\npoetry install\npip3 install -e .\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<ul> <li>Usage for ensemble method (FiDEL)</li> <li>Usage for optimal threshold</li> <li>Usage for confidence interval </li> </ul>"},{"location":"concept/","title":"What is Fermi-Dirac (FD) distribution?","text":""},{"location":"concept/#how-can-we-connect-binary-classifier-to-fd-distribution","title":"How can we connect binary classifier to FD distribution?","text":""},{"location":"concept/#what-are-the-main-benefits-of-fd-distribution","title":"What are the main benefits of FD distribution?","text":""},{"location":"cookbook/","title":"How to generate figures in PNAS paper?","text":""},{"location":"cookbook/#figure-1-in-pnas","title":"Figure 1 in PNAS","text":"<pre><code>import matplotlib.pyplot as plt\nfrom pyFiDEL import SimClassifier, PCR\n# create simulator\nc = SimClassifier(N=10000, rho=.5)\n# generate Gaussian score with target AUC\nscore = c.create_gaussian_scores(auc0=.9)\n# create pcr data\np = PCR(c.score, c.y, sample_size=100, sample_n=1000)\n# plot PCR distribution\nplt.plot(p.pcr, '.')\n</code></pre>"},{"location":"cookbook/#figure-2-in-pnas","title":"Figure 2 in PNAS","text":"<pre><code>import numpy as np\nfrom pyFiDEL.ranks import build_correpond_table\nauclist = np.linspace(0.52, 0.98, num=47)\nrholist = np.linspace(.1, .9, num=17)\n# calculate beta, mu from auc, rho\ndf = build_correpond_table(auclist, rholist, resol=.00001, method='root')\n# plot in 3D space\n</code></pre> <p>beta_surface</p>"},{"location":"cookbook/#figure-3-in-pnas","title":"Figure 3 in PNAS","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>ci</li> <li>ensemble</li> <li>pcr</li> <li>ranks</li> <li>simulator</li> <li>utils</li> </ul>"},{"location":"reference/ci/","title":"ci","text":"<p>ci.py - confidence interval calculation</p>"},{"location":"reference/ci/#pyFiDEL.ci.Pxxy_int","title":"<code>Pxxy_int(beta, mu, rho, resol=1e-06)</code>","text":"<p>calculate Pxxy with integral formula</p> <p>Parameters:</p> Name Type Description Default <code>resol</code> <code>float</code> <p>resolution for integral calculation</p> <code>1e-06</code> <p>Returns:</p> Type Description <code>float</code> <p>Pxxy is probability of x at given y</p>"},{"location":"reference/ci/#pyFiDEL.ci.Pxy_int","title":"<code>Pxy_int(beta, mu, rho, resol=1e-06)</code>","text":"<p>calculate Pxy with integral formula</p> <p>Parameters:</p> Name Type Description Default <code>resol</code> <code>float</code> <p>resolution for integral calculation</p> <code>1e-06</code> <p>Returns:</p> Type Description <code>float</code> <p>Pxy is probability of x at given y</p>"},{"location":"reference/ci/#pyFiDEL.ci.Pxyy_int","title":"<code>Pxyy_int(beta, mu, rho, resol=1e-06)</code>","text":"<p>calculate Pxyy with integral formula</p> <p>Parameters:</p> Name Type Description Default <code>resol</code> <code>float</code> <p>resolution for integral calculation</p> <code>1e-06</code> <p>Returns:</p> Type Description <code>float</code> <p>Pxyy is probability of x at given y</p>"},{"location":"reference/ci/#pyFiDEL.ci.var_auc_fermi","title":"<code>var_auc_fermi(auc, rho, N, resol=1e-06)</code>","text":"<p>calculate variance of AUC from Fermi-Dirac distribution</p> <p>Parameters:</p> Name Type Description Default <code>N</code> <code>int</code> <p>number of samples</p> required <code>resol</code> <code>float</code> <p>resolution for integral calculation</p> <code>1e-06</code> <p>Returns:</p> Type Description <code>dict</code> <p>dictionary of all parameters</p>"},{"location":"reference/ensemble/","title":"ensemble","text":"<p>ensemble.py - ensemble method with FiDEL</p>"},{"location":"reference/ensemble/#pyFiDEL.ensemble.FiDEL","title":"<code>FiDEL</code>","text":"<p>         Bases: <code>object</code></p> <p>ensemble classifier using FiDEL</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pyFiDEL import FiDEL\n&gt;&gt;&gt; fdc = FiDEL()\n&gt;&gt;&gt; fdc.add_prediction(pred1, \"RandomForests\")\n&gt;&gt;&gt; fdc.add_prediction(pred2, \"glm\")\n&gt;&gt;&gt; fdc.add_label(y_label)\n&gt;&gt;&gt; fdc.calculate_performance()\n</code></pre> <p>Attributes:</p> Name Type Description <code>predictions</code> <code>np.ndarray</code> <p>all previous predictions on samples</p> <code>n_samples</code> <code>int</code> <p>number of samples</p> <code>n_methods</code> <code>int</code> <p>number of classifiers</p> <code>method_names</code> <code>list</code> <p>list of method names</p> <code>rank_matrix</code> <code>np.ndarray</code> <p>collection of ranks based on the predictions</p> <code>ensemble_summary</code> <code>pd.DataFrame</code> <p>summary of methods</p>"},{"location":"reference/ensemble/#pyFiDEL.ensemble.FiDEL.add_label","title":"<code>add_label(y_label, true_value='Y')</code>","text":"<p>add label list of <code>Y</code> and <code>N</code></p>"},{"location":"reference/ensemble/#pyFiDEL.ensemble.FiDEL.add_predictions","title":"<code>add_predictions(prediction, method_name='')</code>","text":"<p>add prediction of single method</p> <p>Parameters:</p> Name Type Description Default <code>prediction</code> <code>list | np.ndarray</code> <p>model predictions or scores on samples. sample order must be same on each method</p> required <code>method_name</code> <code>str</code> <p>model or classifier name</p> <code>''</code>"},{"location":"reference/ensemble/#pyFiDEL.ensemble.FiDEL.calculate_performance","title":"<code>calculate_performance(method='FiDEL', alpha=1.0)</code>","text":"<p>calculate ensemble performance</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>ensemble method name</p> <code>'FiDEL'</code> <code>alpha</code> <code>float</code> <p>intensity coefficient of FiDEL calculation</p> <code>1.0</code>"},{"location":"reference/pcr/","title":"pcr","text":"<p>pcr.py - Probability of Class y at given Rank r (PCR)</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR","title":"<code>PCR</code>","text":"<p>         Bases: <code>object</code></p> <p>probability of class at given rank</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.auc","title":"<code>auc()</code>","text":"<p>calculate AUC from pcr</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.auprc","title":"<code>auprc()</code>","text":"<p>calculate area under precision recall curve</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.build_metric","title":"<code>build_metric()</code>","text":"<p>calculate metric and parameters from pcr</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.check_fermi","title":"<code>check_fermi()</code>","text":"<p>check matching between fermi-dirac distribution and pcr</p>"},{"location":"reference/pcr/#pyFiDEL.pcr.PCR.pcr_sample","title":"<code>pcr_sample()</code>","text":"<p>calculate pcr using bootstrap method</p>"},{"location":"reference/ranks/","title":"ranks","text":"<p>ranks.py - rank-based metric calculation for supervised learning</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.auc_rank","title":"<code>auc_rank(scores, y)</code>","text":"<p>calculate AUC using rank formula</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.build_correspond_table","title":"<code>build_correspond_table(auclist, rholist, resol=0.001, method='root')</code>","text":"<p>calculate correspondence table between (auc, rho) and (beta, mu)</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.build_metric","title":"<code>build_metric(scores, y, method='root')</code>","text":"<p>calculate all metrics using rank formula</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.get_fermi_min","title":"<code>get_fermi_min(auc, rho, N=1, resol=0.0001, method='beta')</code>","text":"<p>calculate beta and mu (or l1 and l2) from AUC and rho</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.get_fermi_root","title":"<code>get_fermi_root(auc, rho, N=1)</code>","text":"<p>calculate beta and mu from AUC and rho</p>"},{"location":"reference/ranks/#pyFiDEL.ranks.get_lambda","title":"<code>get_lambda(auc, rho, N=1000)</code>","text":"<p>calculate lambda1, lambda2 from auc, rho</p>"},{"location":"reference/simulator/","title":"simulator","text":"<p>simulator.py - create gaussian score distribution to mimic binary classifier</p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier","title":"<code>SimClassifier</code>","text":"<p>         Bases: <code>object</code></p> <p>Simulator for the binary classifier.</p> <p>It generates multiple Gaussian score distributions to model various binary classifier with different AUC.</p> <p>Attributes:</p> Name Type Description <code>N</code> <code>int</code> <p>number of samples</p> <code>rho</code> <code>float</code> <p>ratio between True/False element counts</p> <code>N1</code> <code>int</code> <p>number of True elements</p> <code>N2</code> <code>int</code> <p>number of False elements</p> <code>y</code> <code>nd.array</code> <p>array of ground truth</p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier.create_gaussian_scores","title":"<code>create_gaussian_scores(auc0=0.9, tol=0.0001, max_iter=2000)</code>","text":"<p>create gaussian scores to match AUC.</p> <p>Parameters:</p> Name Type Description Default <code>auc0</code> <code>float</code> <p>target Area under ROC curve (AUC)</p> <code>0.9</code> <code>tol</code> <code>float</code> <p>tolerance for target AUC</p> <code>0.0001</code> <code>max_iter</code> <code>int</code> <p>the maximum number of iteration</p> <code>2000</code> <p>Returns:</p> Type Description <code>np.ndarray</code> <p>score of binary classifier</p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier.create_predictions","title":"<code>create_predictions(n_methods=20, auc_list=None)</code>","text":"<p>create n_methods gaussian score sets</p> <p>Parameters:</p> Name Type Description Default <code>n_methods</code> <code>int</code> <p>number of classifiers</p> <code>20</code> <code>auc_list</code> <code>list</code> <p>list of target AUCs</p> <code>None</code> <p>Returns:</p> Type Description <code>np.ndarray</code> <p>prediction matrix of shape (N, n_methods)</p>"},{"location":"reference/simulator/#pyFiDEL.simulator.SimClassifier.plot_score","title":"<code>plot_score()</code>","text":"<p>plot histogram of scores</p>"},{"location":"reference/utils/","title":"utils","text":"<p>utils.py - utility functions</p>"},{"location":"reference/utils/#pyFiDEL.utils.fermi_b","title":"<code>fermi_b(x, b, m, normalized=False)</code>","text":"<p>calculate Fermi-Dirac distribution of array x with beta and mu.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>np.ndarray</code> <p>input array</p> required <code>b</code> <code>float</code> <p>beta</p> required <code>m</code> <code>float</code> <p>mu</p> required <code>normalized</code> <code>bool</code> <p>option to normalized distribution</p> <code>False</code> <p>Returns:</p> Type Description <code>np.ndarray</code> <p>Fermi-Dirac distribution</p>"},{"location":"reference/utils/#pyFiDEL.utils.fermi_l","title":"<code>fermi_l(x, l1, l2)</code>","text":"<p>calculate Fermi-Dirac distribution with np.array x with l1 and l2</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>np.ndarray</code> <p>array of inputs</p> required <code>l1</code> <code>float</code> <p>l1 coefficient</p> required <code>l2</code> <code>float</code> <p>l2 coefficient</p> required <p>Returns:</p> Type Description <code>np.ndarray</code> <p>Fermi-Dirac distribution</p>"}]}